import { InferSelectModel } from "drizzle-orm";
import { posts } from "~/server/db/schema";

export default function PostView(props: {
  post: InferSelectModel<typeof posts>;
}) {
  return <PostViewV0 {...props} />;
}

function timeSinceUpload(uploadDate: Date) {
  const now = new Date();

  const diff = now.getTime() - uploadDate.getTime();

  const diffSeconds = diff / 1000;
  const diffMinutes = diffSeconds / 60;
  const diffHours = diffMinutes / 60;

  let output: number;

  if (diffHours < 1) {
    return `${Math.floor(diffMinutes)} minutes ago`;
  }

  return `${Math.floor(diffHours)} hours ago`;
}

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/b7FimUwHPof
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { AvatarImage, AvatarFallback, Avatar } from "~/components/ui/avatar";
import { Button } from "~/components/ui/button";
import { getUser } from "~/server/utils/drizzleFunctions";

export async function PostViewV0(props: {
  post: InferSelectModel<typeof posts>;
}) {
  const { post } = props;

  const user = await getUser(post.authorId);

  if (!user) {
    throw new Error("User not found!");
  }

  return (
    <div className="overflow-hidden rounded-lg bg-white shadow-md dark:bg-gray-900">
      <div className="flex items-center gap-4 p-4">
        <Avatar className="h-10 w-10">
          <AvatarImage alt="@shadcn" src={user.imageUrl ?? ""} />
          <AvatarFallback>CN</AvatarFallback>
        </Avatar>
        <div className="flex-1">
          <div className="flex items-center justify-between">
            <div className="font-medium text-black">
              {user.fullName!.includes("null") ? user.username : user.fullName}
            </div>
            <time className="text-xs text-gray-500 dark:text-gray-400">
              {timeSinceUpload(post.createdAt)}
            </time>
          </div>
          <div className="text-sm text-gray-500 dark:text-gray-400">
            @{user.username}
          </div>
        </div>
      </div>
      <div className="p-4">
        <p className="text-gray-700 dark:text-gray-300">{post.text}</p>
        <div className="mt-4 flex items-center gap-2">
          <Button size="icon" variant="ghost">
            <HeartIcon className="h-5 w-5 text-black" />
            <span className="sr-only">Like</span>
          </Button>
          <Button size="icon" variant="ghost">
            <MessageCircleIcon className="h-5 w-5 text-black" />
            <span className="sr-only">Comment</span>
          </Button>
        </div>
      </div>
    </div>
  );
}

function HeartIcon(props: { className: string }) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
    </svg>
  );
}

function MessageCircleIcon(props: { className: string }) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m3 21 1.9-5.7a8.5 8.5 0 1 1 3.8 3.8z" />
    </svg>
  );
}
